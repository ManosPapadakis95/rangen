// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/rangen.h"
#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// runif
Rcpp::NumericVector runif(size_t n, double min, double max);
RcppExport SEXP _rangen_runif(SEXP nSEXP, SEXP minSEXP, SEXP maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type min(minSEXP);
    Rcpp::traits::input_parameter< double >::type max(maxSEXP);
    rcpp_result_gen = Rcpp::wrap(runif(n, min, max));
    return rcpp_result_gen;
END_RCPP
}
// rbeta
Rcpp::NumericVector rbeta(size_t size, double alpha, double beta);
RcppExport SEXP _rangen_rbeta(SEXP sizeSEXP, SEXP alphaSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< size_t >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(rbeta(size, alpha, beta));
    return rcpp_result_gen;
END_RCPP
}
// rexp
Rcpp::NumericVector rexp(size_t size, double rate);
RcppExport SEXP _rangen_rexp(SEXP sizeSEXP, SEXP rateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< size_t >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< double >::type rate(rateSEXP);
    rcpp_result_gen = Rcpp::wrap(rexp(size, rate));
    return rcpp_result_gen;
END_RCPP
}
// rchisq
Rcpp::NumericVector rchisq(size_t size, double df);
RcppExport SEXP _rangen_rchisq(SEXP sizeSEXP, SEXP dfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< size_t >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< double >::type df(dfSEXP);
    rcpp_result_gen = Rcpp::wrap(rchisq(size, df));
    return rcpp_result_gen;
END_RCPP
}
// rgamma
Rcpp::NumericVector rgamma(size_t size, double shape, double rate);
RcppExport SEXP _rangen_rgamma(SEXP sizeSEXP, SEXP shapeSEXP, SEXP rateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< size_t >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< double >::type shape(shapeSEXP);
    Rcpp::traits::input_parameter< double >::type rate(rateSEXP);
    rcpp_result_gen = Rcpp::wrap(rgamma(size, shape, rate));
    return rcpp_result_gen;
END_RCPP
}
// rgeom
Rcpp::NumericVector rgeom(size_t size, double prob);
RcppExport SEXP _rangen_rgeom(SEXP sizeSEXP, SEXP probSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< size_t >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< double >::type prob(probSEXP);
    rcpp_result_gen = Rcpp::wrap(rgeom(size, prob));
    return rcpp_result_gen;
END_RCPP
}
// rcauchy
Rcpp::NumericVector rcauchy(size_t size, double location, double scale);
RcppExport SEXP _rangen_rcauchy(SEXP sizeSEXP, SEXP locationSEXP, SEXP scaleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< size_t >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< double >::type location(locationSEXP);
    Rcpp::traits::input_parameter< double >::type scale(scaleSEXP);
    rcpp_result_gen = Rcpp::wrap(rcauchy(size, location, scale));
    return rcpp_result_gen;
END_RCPP
}
// rt
Rcpp::NumericVector rt(size_t size, double df, double ncp);
RcppExport SEXP _rangen_rt(SEXP sizeSEXP, SEXP dfSEXP, SEXP ncpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< size_t >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< double >::type df(dfSEXP);
    Rcpp::traits::input_parameter< double >::type ncp(ncpSEXP);
    rcpp_result_gen = Rcpp::wrap(rt(size, df, ncp));
    return rcpp_result_gen;
END_RCPP
}
// rpareto
Rcpp::NumericVector rpareto(size_t size, double shape, double scale);
RcppExport SEXP _rangen_rpareto(SEXP sizeSEXP, SEXP shapeSEXP, SEXP scaleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< size_t >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< double >::type shape(shapeSEXP);
    Rcpp::traits::input_parameter< double >::type scale(scaleSEXP);
    rcpp_result_gen = Rcpp::wrap(rpareto(size, shape, scale));
    return rcpp_result_gen;
END_RCPP
}
// rfrechet
Rcpp::NumericVector rfrechet(size_t size, double shape, double mean, double scale);
RcppExport SEXP _rangen_rfrechet(SEXP sizeSEXP, SEXP shapeSEXP, SEXP meanSEXP, SEXP scaleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< size_t >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< double >::type shape(shapeSEXP);
    Rcpp::traits::input_parameter< double >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< double >::type scale(scaleSEXP);
    rcpp_result_gen = Rcpp::wrap(rfrechet(size, shape, mean, scale));
    return rcpp_result_gen;
END_RCPP
}
// rlaplace
Rcpp::NumericVector rlaplace(size_t size, double mean, double sigma);
RcppExport SEXP _rangen_rlaplace(SEXP sizeSEXP, SEXP meanSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< size_t >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< double >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(rlaplace(size, mean, sigma));
    return rcpp_result_gen;
END_RCPP
}
// rgumble
Rcpp::NumericVector rgumble(size_t size, double mean, double sigma);
RcppExport SEXP _rangen_rgumble(SEXP sizeSEXP, SEXP meanSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< size_t >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< double >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(rgumble(size, mean, sigma));
    return rcpp_result_gen;
END_RCPP
}
// rarcsine
Rcpp::NumericVector rarcsine(size_t size, double min, double max);
RcppExport SEXP _rangen_rarcsine(SEXP sizeSEXP, SEXP minSEXP, SEXP maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< size_t >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< double >::type min(minSEXP);
    Rcpp::traits::input_parameter< double >::type max(maxSEXP);
    rcpp_result_gen = Rcpp::wrap(rarcsine(size, min, max));
    return rcpp_result_gen;
END_RCPP
}
// sample_int
Rcpp::IntegerVector sample_int(size_t n, size_t size, bool replace);
RcppExport SEXP _rangen_sample_int(SEXP nSEXP, SEXP sizeSEXP, SEXP replaceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< size_t >::type n(nSEXP);
    Rcpp::traits::input_parameter< size_t >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< bool >::type replace(replaceSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_int(n, size, replace));
    return rcpp_result_gen;
END_RCPP
}
// sample
Rcpp::NumericVector sample(Rcpp::NumericVector x, size_t size, bool replace);
RcppExport SEXP _rangen_sample(SEXP xSEXP, SEXP sizeSEXP, SEXP replaceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< size_t >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< bool >::type replace(replaceSEXP);
    rcpp_result_gen = Rcpp::wrap(sample(x, size, replace));
    return rcpp_result_gen;
END_RCPP
}
// colSample
Rcpp::NumericVector colSample(Rcpp::NumericMatrix x, size_t size, Rcpp::LogicalVector replace);
RcppExport SEXP _rangen_colSample(SEXP xSEXP, SEXP sizeSEXP, SEXP replaceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< size_t >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector >::type replace(replaceSEXP);
    rcpp_result_gen = Rcpp::wrap(colSample(x, size, replace));
    return rcpp_result_gen;
END_RCPP
}
// rowSample
Rcpp::NumericVector rowSample(Rcpp::NumericMatrix x, size_t size, Rcpp::LogicalVector replace);
RcppExport SEXP _rangen_rowSample(SEXP xSEXP, SEXP sizeSEXP, SEXP replaceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< size_t >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector >::type replace(replaceSEXP);
    rcpp_result_gen = Rcpp::wrap(rowSample(x, size, replace));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_rangen_runif", (DL_FUNC) &_rangen_runif, 3},
    {"_rangen_rbeta", (DL_FUNC) &_rangen_rbeta, 3},
    {"_rangen_rexp", (DL_FUNC) &_rangen_rexp, 2},
    {"_rangen_rchisq", (DL_FUNC) &_rangen_rchisq, 2},
    {"_rangen_rgamma", (DL_FUNC) &_rangen_rgamma, 3},
    {"_rangen_rgeom", (DL_FUNC) &_rangen_rgeom, 2},
    {"_rangen_rcauchy", (DL_FUNC) &_rangen_rcauchy, 3},
    {"_rangen_rt", (DL_FUNC) &_rangen_rt, 3},
    {"_rangen_rpareto", (DL_FUNC) &_rangen_rpareto, 3},
    {"_rangen_rfrechet", (DL_FUNC) &_rangen_rfrechet, 4},
    {"_rangen_rlaplace", (DL_FUNC) &_rangen_rlaplace, 3},
    {"_rangen_rgumble", (DL_FUNC) &_rangen_rgumble, 3},
    {"_rangen_rarcsine", (DL_FUNC) &_rangen_rarcsine, 3},
    {"_rangen_sample_int", (DL_FUNC) &_rangen_sample_int, 3},
    {"_rangen_sample", (DL_FUNC) &_rangen_sample, 3},
    {"_rangen_colSample", (DL_FUNC) &_rangen_colSample, 3},
    {"_rangen_rowSample", (DL_FUNC) &_rangen_rowSample, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_rangen(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
